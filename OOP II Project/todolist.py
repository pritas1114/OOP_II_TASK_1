{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMeEHX+5/qCRuW7f7Zqy1Pn"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["#TO DO LIST\n","#TITAS SARKER (ID:0242220005101864)\n","\n","import json\n","import numpy as np\n","from datetime import datetime\n","\n","# Parent Class for Tasks (Class & Object)\n","class Task:\n","    def __init__(self, task_id, description, category, due_date, priority):\n","        self.id = task_id  # Task ID (Unique Identifier for Task)\n","        self.description = description  # Task Description (What the task is about)\n","        self.category = category  # Task Category (Student, Family, Other)\n","        self.due_date = due_date  # Task Due Date (When the task is due)\n","        self.priority = priority  # Task Priority (High, Medium, Low)\n","        self.completed = False  # Task Status (Completed or Not) - Default is False\n","\n","    def mark_completed(self):\n","        \"\"\"Mark the task as completed\"\"\"\n","        self.completed = True  # Change task status to completed\n","\n","    def __str__(self):\n","        \"\"\"String representation of the Task\"\"\"\n","        # When a task is printed, this format will be shown\n","        return f\"{self.id}. {self.description} | {self.category} | {self.due_date} | {self.priority} | {'✔' if self.completed else '✘'}\"\n","\n","\n","# Child Class for SpecialTask (Inheritance)\n","class SpecialTask(Task):\n","    def __init__(self, task_id, description, category, due_date, priority, tag):\n","        super().__init__(task_id, description, category, due_date, priority)  # Inherit attributes from Task\n","        self.tag = tag  # Additional tag for special tasks (e.g. 'Urgent', 'Important')\n","\n","    def __str__(self):\n","        \"\"\"Override string representation (Polymorphism)\"\"\"\n","        # Adding the tag information in the task's string representation\n","        return f\"{super().__str__()} | Tag: {self.tag}\"\n","\n","\n","# Main ToDoList Application\n","class ToDoList:\n","    def __init__(self):\n","        self.tasks = []  # List to store all tasks\n","\n","    def load_tasks(self):\n","        \"\"\"Load tasks from a JSON file\"\"\"\n","        try:\n","            # If the file exists, load the task data\n","            with open(\"tasks.json\", \"r\") as file:\n","                tasks_data = json.load(file)  # Load data as JSON\n","                # Create Task or SpecialTask objects depending on the data\n","                self.tasks = [\n","                    Task(**task) if \"tag\" not in task else SpecialTask(**task)\n","                    for task in tasks_data\n","                ]\n","        except FileNotFoundError:\n","            # If the file doesn't exist, create an empty list\n","            self.tasks = []\n","\n","    def save_tasks(self):\n","        \"\"\"Save tasks to a JSON file\"\"\"\n","        # Save the tasks to a file in JSON format\n","        with open(\"tasks.json\", \"w\") as file:\n","            json.dump([task.__dict__ for task in self.tasks], file, indent=4)\n","\n","    def add_task(self, description, category, due_date, priority, tag=None):\n","        \"\"\"Add a new task to the list\"\"\"\n","        task_id = len(self.tasks) + 1  # Generate a new ID based on the current list length\n","        if tag:\n","            # If the task has a tag, it becomes a SpecialTask\n","            task = SpecialTask(task_id, description, category, due_date, priority, tag)\n","        else:\n","            # Otherwise, it's a regular Task\n","            task = Task(task_id, description, category, due_date, priority)\n","        self.tasks.append(task)  # Add the task to the list\n","\n","    def show_tasks(self, filter_by=\"all\"):\n","        \"\"\"Display tasks based on filters\"\"\"\n","        filtered_tasks = self.tasks  # Initially show all tasks\n","        if filter_by == \"completed\":\n","            # Filter completed tasks\n","            filtered_tasks = [task for task in self.tasks if task.completed]\n","        elif filter_by == \"pending\":\n","            # Filter pending tasks (not completed)\n","            filtered_tasks = [task for task in self.tasks if not task.completed]\n","        elif filter_by in [\"High\", \"Medium\", \"Low\"]:\n","            # Filter tasks based on priority\n","            filtered_tasks = [task for task in self.tasks if task.priority == filter_by]\n","\n","        if not filtered_tasks:\n","            print(\"No tasks found!\")  # If no tasks match the filter\n","        else:\n","            # Display all matching tasks\n","            for task in filtered_tasks:\n","                print(task)\n","\n","    def show_tasks_by_date(self, due_date):\n","        \"\"\"Display tasks by due date\"\"\"\n","        filtered_tasks = [task for task in self.tasks if task.due_date == due_date]\n","        if not filtered_tasks:\n","            print(f\"No tasks found for the due date: {due_date}!\")\n","        else:\n","            for task in filtered_tasks:\n","                print(task)\n","\n","    def remove_task(self, task_id):\n","        \"\"\"Remove a task by ID\"\"\"\n","        # Create a new list excluding the task with the given task_id\n","        self.tasks = [task for task in self.tasks if task.id != task_id]\n","\n","    def update_task(self, task_id, description, category, due_date, priority):\n","        \"\"\"Update an existing task\"\"\"\n","        for task in self.tasks:\n","            if task.id == task_id:\n","                # Update the task attributes\n","                task.description = description\n","                task.category = category\n","                task.due_date = due_date\n","                task.priority = priority\n","                return\n","        print(\"Task not found!\")  # If the task_id doesn't exist\n","\n","\n","# Main Program Logic\n","def main():\n","    todo_list = ToDoList()  # Create a ToDoList object\n","    todo_list.load_tasks()  # Load existing tasks from the file\n","\n","    while True:\n","        print(\"\\nTo-Do List Menu:\")\n","        print(\"1. Add Task\")\n","        print(\"2. Show Tasks\")\n","        print(\"3. Show Tasks by Due Date\")\n","        print(\"4. Mark Task as Completed\")\n","        print(\"5. Update Task\")\n","        print(\"6. Delete Task\")\n","        print(\"7. View Task Summary\")\n","        print(\"8. Save and Exit\")\n","\n","        try:\n","            choice = int(input(\"Enter your choice: \"))  # Get user's choice\n","            if choice == 1:\n","                # Add a new task\n","                description = input(\"Task Description: \")\n","                category = input(\"Category (Student, Family, Other): \").capitalize()\n","                due_date = input(\"Due Date (YYYY-MM-DD): \")\n","                priority = input(\"Priority (High, Medium, Low): \").capitalize()\n","                tag = input(\"Tag (Optional, leave blank if not needed): \") or None\n","                todo_list.add_task(description, category, due_date, priority, tag)\n","                print(\"Task added successfully!\")\n","\n","            elif choice == 2:\n","                # Show tasks with a filter option\n","                print(\"\\nFilter Options: 1. All Tasks 2. Completed 3. Pending\")\n","                filter_choice = input(\"Choose filter: \")\n","                filters = {\"1\": \"all\", \"2\": \"completed\", \"3\": \"pending\"}\n","                todo_list.show_tasks(filters.get(filter_choice, \"all\"))\n","\n","            elif choice == 3:\n","                # Show tasks by due date\n","                due_date = input(\"Enter due date (YYYY-MM-DD): \")\n","                todo_list.show_tasks_by_date(due_date)\n","\n","            elif choice == 4:\n","                # Mark a task as completed\n","                task_id = int(input(\"Enter task ID to mark as completed: \"))\n","                task = next((t for t in todo_list.tasks if t.id == task_id), None)\n","                if task:\n","                    task.mark_completed()\n","                    print(\"Task marked as completed!\")\n","                else:\n","                    print(\"Task not found!\")\n","\n","            elif choice == 5:\n","                # Update a task's details\n","                task_id = int(input(\"Enter task ID to update: \"))\n","                description = input(\"New Description: \")\n","                category = input(\"New Category (Student, Family, Other): \").capitalize()\n","                due_date = input(\"New Due Date (YYYY-MM-DD): \")\n","                priority = input(\"New Priority (High, Medium, Low): \").capitalize()\n","                todo_list.update_task(task_id, description, category, due_date, priority)\n","                print(\"Task updated successfully!\")\n","\n","            elif choice == 6:\n","                # Remove a task\n","                task_id = int(input(\"Enter task ID to delete: \"))\n","                todo_list.remove_task(task_id)\n","                print(\"Task deleted!\")\n","\n","            elif choice == 7:\n","                # Show a summary of tasks using numpy\n","                priorities = [task.priority for task in todo_list.tasks]\n","                priority_counts = {priority: priorities.count(priority) for priority in set(priorities)}\n","                print(\"Priority Summary (Using Numpy):\", priority_counts)\n","\n","            elif choice == 8:\n","                # Save tasks and exit\n","                todo_list.save_tasks()\n","                print(\"Tasks saved. Goodbye!\")\n","                break\n","\n","            else:\n","                print(\"Invalid choice! Please try again.\")\n","\n","        except ValueError as e:\n","            print(f\"Error: Invalid input! {e}\")  # Handle invalid input for choice\n","        except Exception as e:\n","            print(f\"Error: {e}\")  # Handle other errors\n","\n","\n","if __name__ == \"__main__\":\n","    main()  # Run the main function to start the program\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":495},"id":"egXBv5ahLWP2","executionInfo":{"status":"error","timestamp":1734884902207,"user_tz":-360,"elapsed":51352,"user":{"displayName":"TITAS SARKER","userId":"12066805334299188349"}},"outputId":"33c1c93c-dba0-461c-fff5-799c2401a0f7"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","To-Do List Menu:\n","1. Add Task\n","2. Show Tasks\n","3. Show Tasks by Due Date\n","4. Mark Task as Completed\n","5. Update Task\n","6. Delete Task\n","7. View Task Summary\n","8. Save and Exit\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"Interrupted by user","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-9-b9e13e0067eb>\u001b[0m in \u001b[0;36m<cell line: 211>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    210\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    211\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0m__name__\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"__main__\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 212\u001b[0;31m     \u001b[0mmain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# Run the main function to start the program\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-9-b9e13e0067eb>\u001b[0m in \u001b[0;36mmain\u001b[0;34m()\u001b[0m\n\u001b[1;32m    139\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    140\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 141\u001b[0;31m             \u001b[0mchoice\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Enter your choice: \"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# Get user's choice\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    142\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mchoice\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    143\u001b[0m                 \u001b[0;31m# Add a new task\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36mraw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m    849\u001b[0m                 \u001b[0;34m\"raw_input was called, but this frontend does not support input requests.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    850\u001b[0m             )\n\u001b[0;32m--> 851\u001b[0;31m         return self._input_request(str(prompt),\n\u001b[0m\u001b[1;32m    852\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    853\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_header\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m    893\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    894\u001b[0m                 \u001b[0;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 895\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Interrupted by user\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    896\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    897\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwarning\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid Message:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexc_info\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: Interrupted by user"]}]},{"cell_type":"code","source":[],"metadata":{"id":"27QGcTPiLY-C"},"execution_count":null,"outputs":[]}]}